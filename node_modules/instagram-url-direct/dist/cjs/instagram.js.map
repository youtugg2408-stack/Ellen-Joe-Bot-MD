{
  "version": 3,
  "sources": ["../../src/instagram.ts"],
  "sourcesContent": ["import axios from 'axios'\nimport qs from 'qs'\n\n//Interface\nexport interface InstagramResponse {\n    results_number: number,\n    url_list: string[],\n    post_info: {\n        owner_username: string,\n        owner_fullname: string,\n        is_verified: boolean,\n        is_private: boolean,\n        likes: number,\n        is_ad: boolean,\n        caption: string\n    },\n    media_details: {\n        type: string,\n        dimensions: {\n            height: number,\n            width: number\n        },\n        url: string,\n        video_view_count?: number,\n        thumbnail?: string\n    }[],\n}\n\nexport interface InstagramError {\n    error: string\n}\n\n//Main function\nexport default async function instagramGetUrl (url_media : string){\n    return new Promise <InstagramResponse> (async (resolve,reject)=>{\n        try {\n            url_media = await checkRedirect(url_media)\n            const SHORTCODE = getShortcode(url_media)\n            const INSTAGRAM_REQUEST = await instagramRequest(SHORTCODE)\n            const OUTPUT_DATA = createOutputData(INSTAGRAM_REQUEST)\n            resolve(OUTPUT_DATA as InstagramResponse)\n        } catch(err : any){\n            let error = {\n                error: err.message\n            }\n            reject(error)\n        }\n    })\n}\n\n//Utilities\nasync function checkRedirect (url : string){\n    let split_url = url.split(\"/\")\n    if(split_url.includes(\"share\")){\n        let res = await axios.get(url)\n        return res.request.path\n    }\n    return url\n}\n\nfunction formatPostInfo(requestData : any){\n    try{\n        let mediaCapt = requestData.edge_media_to_caption.edges\n        const capt = (mediaCapt.length === 0) ? \"\" : mediaCapt[0].node.text\n        return {\n            owner_username: requestData.owner.username,\n            owner_fullname: requestData.owner.full_name,\n            is_verified: requestData.owner.is_verified,\n            is_private: requestData.owner.is_private,\n            likes: requestData.edge_media_preview_like.count,\n            is_ad: requestData.is_ad,\n            caption: capt\n        }\n    } catch(err : any){\n        throw new Error(`Failed to format post info: ${err.message}`)\n    }\n}\n\nfunction formatMediaDetails(mediaData : any){\n    try{\n        if(mediaData.is_video){\n            return {\n                type: \"video\",\n                dimensions: mediaData.dimensions,\n                video_view_count: mediaData.video_view_count,\n                url: mediaData.video_url,\n                thumbnail: mediaData.display_url\n            }\n        } else {\n            return {\n                type: \"image\",\n                dimensions: mediaData.dimensions,\n                url: mediaData.display_url\n            }\n        }\n    } catch(err : any){\n        throw new Error(`Failed to format media details: ${err.message}`)\n    }\n}\n\nfunction getShortcode(url : string){\n    try{\n        let split_url = url.split(\"/\")\n        let post_tags = [\"p\", \"reel\", \"tv\", \"reels\"]\n        let index_shortcode = split_url.findIndex(item => post_tags.includes(item)) + 1\n        let shortcode = split_url[index_shortcode]\n        return shortcode\n    } catch(err : any){\n        throw new Error(`Failed to obtain shortcode: ${err.message}`)\n    }\n}\n\nfunction isSidecar(requestData : any){\n    try{\n        return requestData[\"__typename\"] == \"XDTGraphSidecar\"\n    } catch(err : any){\n        throw new Error(`Failed sidecar verification: ${err.message}`)\n    }\n}\n\nasync function instagramRequest(shortcode: string) {\n    try{\n        const BASE_URL = \"https://www.instagram.com/graphql/query\"\n        const INSTAGRAM_DOCUMENT_ID = \"8845758582119845\"\n        let dataBody = qs.stringify({\n            'variables': JSON.stringify({\n                'shortcode': shortcode,\n                'fetch_tagged_user_count': null,\n                'hoisted_comment_id': null,\n                'hoisted_reply_id': null\n            }),\n            'doc_id': INSTAGRAM_DOCUMENT_ID \n        });\n    \n        let config = {\n            method: 'post',\n            maxBodyLength: Infinity,\n            url: BASE_URL,\n            headers: { \n                'Content-Type': 'application/x-www-form-urlencoded'\n            },\n            data : dataBody\n        };\n    \n        const {data} = await axios.request(config)\n        if(!data.data?.xdt_shortcode_media) throw new Error(\"Only posts/reels supported, check if your link is valid.\")\n        return data.data.xdt_shortcode_media\n    } catch(err : any){\n        throw new Error(`Failed instagram request: ${err.message}`)\n    }\n}\n\nfunction createOutputData(requestData : any){\n    try{\n        let url_list = [], media_details = []\n        const IS_SIDECAR = isSidecar(requestData)\n        if(IS_SIDECAR){\n            //Post with sidecar\n            requestData.edge_sidecar_to_children.edges.forEach((media : any)=>{\n                media_details.push(formatMediaDetails(media.node))\n                if(media.node.is_video){ //Sidecar video item\n                    url_list.push(media.node.video_url as string)\n                } else { //Sidecar image item\n                    url_list.push(media.node.display_url as string)\n                }\n            })\n        } else {\n            //Post without sidecar\n            media_details.push(formatMediaDetails(requestData))\n            if(requestData.is_video){ // Video media\n                url_list.push(requestData.video_url as string)\n            } else { //Image media\n                url_list.push(requestData.display_url as string)\n            }\n        }\n\n        return {\n            results_number: url_list.length,\n            url_list,\n            post_info: formatPostInfo(requestData),\n            media_details\n        }\n    } catch(err : any){\n        throw new Error(`Failed to create output data: ${err.message}`)\n    }\n}\n\n\n\n"],
  "mappings": "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",
  "names": []
}
